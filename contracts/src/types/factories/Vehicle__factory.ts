/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Vehicle, VehicleInterface } from "../Vehicle";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "driver",
        type: "address",
      },
      {
        components: [
          {
            internalType: "string",
            name: "vehicle_no",
            type: "string",
          },
          {
            internalType: "string",
            name: "RC",
            type: "string",
          },
          {
            internalType: "string",
            name: "vehicleImages",
            type: "string",
          },
          {
            internalType: "enum Vehicle.VEHICLE_TYPE",
            name: "vehicleType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "driver",
            type: "address",
          },
        ],
        internalType: "struct Vehicle.VEHICLE_INFO",
        name: "_vehicle",
        type: "tuple",
      },
    ],
    name: "addVehicle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "driver",
        type: "address",
      },
    ],
    name: "getVehicle",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "vehicle_no",
            type: "string",
          },
          {
            internalType: "string",
            name: "RC",
            type: "string",
          },
          {
            internalType: "string",
            name: "vehicleImages",
            type: "string",
          },
          {
            internalType: "enum Vehicle.VEHICLE_TYPE",
            name: "vehicleType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "driver",
            type: "address",
          },
        ],
        internalType: "struct Vehicle.VEHICLE_INFO",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "driver",
        type: "address",
      },
      {
        components: [
          {
            internalType: "string",
            name: "vehicle_no",
            type: "string",
          },
          {
            internalType: "string",
            name: "RC",
            type: "string",
          },
          {
            internalType: "string",
            name: "vehicleImages",
            type: "string",
          },
          {
            internalType: "enum Vehicle.VEHICLE_TYPE",
            name: "vehicleType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "driver",
            type: "address",
          },
        ],
        internalType: "struct Vehicle.VEHICLE_INFO",
        name: "_vehicle",
        type: "tuple",
      },
    ],
    name: "updateVehicle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6110248061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806349d883831461006757806364116aa814610083578063715018a61461009f5780638da5cb5b146100a9578063a93ab101146100c7578063f2fde38b146100f7575b600080fd5b610081600480360381019061007c9190610b5b565b610113565b005b61009d60048036038101906100989190610b5b565b610262565b005b6100a76103b1565b005b6100b16103c5565b6040516100be9190610d3f565b60405180910390f35b6100e160048036038101906100dc9190610b32565b6103ee565b6040516100ee9190610d9a565b60405180910390f35b610111600480360381019061010c9190610b32565b6106e2565b005b61011b610766565b6101236108b0565b81905080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908051906020019061018292919061092d565b50602082015181600101908051906020019061019f92919061092d565b5060408201518160020190805190602001906101bc92919061092d565b5060608201518160030160006101000a81548160ff0219169083600381111561020e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060808201518160030160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050505050565b61026a610766565b6102726108b0565b81905080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906102d192919061092d565b5060208201518160010190805190602001906102ee92919061092d565b50604082015181600201908051906020019061030b92919061092d565b5060608201518160030160006101000a81548160ff0219169083600381111561035d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060808201518160030160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050505050565b6103b9610766565b6103c360006107e4565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103f66108b0565b6103fe610766565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a001604052908160008201805461045890610ee3565b80601f016020809104026020016040519081016040528092919081815260200182805461048490610ee3565b80156104d15780601f106104a6576101008083540402835291602001916104d1565b820191906000526020600020905b8154815290600101906020018083116104b457829003601f168201915b505050505081526020016001820180546104ea90610ee3565b80601f016020809104026020016040519081016040528092919081815260200182805461051690610ee3565b80156105635780601f1061053857610100808354040283529160200191610563565b820191906000526020600020905b81548152906001019060200180831161054657829003601f168201915b5050505050815260200160028201805461057c90610ee3565b80601f01602080910402602001604051908101604052809291908181526020018280546105a890610ee3565b80156105f55780601f106105ca576101008083540402835291602001916105f5565b820191906000526020600020905b8154815290600101906020018083116105d857829003601f168201915b505050505081526020016003820160009054906101000a900460ff166003811115610649577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811115610681577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016003820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b6106ea610766565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561075a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075190610d5a565b60405180910390fd5b610763816107e4565b50565b61076e6108a8565b73ffffffffffffffffffffffffffffffffffffffff1661078c6103c5565b73ffffffffffffffffffffffffffffffffffffffff16146107e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d990610d7a565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518060a001604052806060815260200160608152602001606081526020016000600381111561090a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b82805461093990610ee3565b90600052602060002090601f01602090048101928261095b57600085556109a2565b82601f1061097457805160ff19168380011785556109a2565b828001600101855582156109a2579182015b828111156109a1578251825591602001919060010190610986565b5b5090506109af91906109b3565b5090565b5b808211156109cc5760008160009055506001016109b4565b5090565b60006109e36109de84610ded565b610dbc565b9050828152602081018484840111156109fb57600080fd5b610a06848285610ea1565b509392505050565b600081359050610a1d81610fc7565b92915050565b600081359050610a3281610fde565b92915050565b600082601f830112610a4957600080fd5b8135610a598482602086016109d0565b91505092915050565b600060a08284031215610a7457600080fd5b610a7e60a0610dbc565b9050600082013567ffffffffffffffff811115610a9a57600080fd5b610aa684828501610a38565b600083015250602082013567ffffffffffffffff811115610ac657600080fd5b610ad284828501610a38565b602083015250604082013567ffffffffffffffff811115610af257600080fd5b610afe84828501610a38565b6040830152506060610b1284828501610a23565b6060830152506080610b2684828501610a0e565b60808301525092915050565b600060208284031215610b4457600080fd5b6000610b5284828501610a0e565b91505092915050565b60008060408385031215610b6e57600080fd5b6000610b7c85828601610a0e565b925050602083013567ffffffffffffffff811115610b9957600080fd5b610ba585828601610a62565b9150509250929050565b610bb881610e4a565b82525050565b610bc781610e4a565b82525050565b610bd681610e8f565b82525050565b6000610be782610e1d565b610bf18185610e28565b9350610c01818560208601610eb0565b610c0a81610fa2565b840191505092915050565b6000610c22602683610e39565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610c88602083610e39565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600060a0830160008301518482036000860152610cd88282610bdc565b91505060208301518482036020860152610cf28282610bdc565b91505060408301518482036040860152610d0c8282610bdc565b9150506060830151610d216060860182610bcd565b506080830151610d346080860182610baf565b508091505092915050565b6000602082019050610d546000830184610bbe565b92915050565b60006020820190508181036000830152610d7381610c15565b9050919050565b60006020820190508181036000830152610d9381610c7b565b9050919050565b60006020820190508181036000830152610db48184610cbb565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715610de357610de2610f73565b5b8060405250919050565b600067ffffffffffffffff821115610e0857610e07610f73565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610e5582610e6f565b9050919050565b6000819050610e6a82610fb3565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e9a82610e5c565b9050919050565b82818337600083830152505050565b60005b83811015610ece578082015181840152602081019050610eb3565b83811115610edd576000848401525b50505050565b60006002820490506001821680610efb57607f821691505b60208210811415610f0f57610f0e610f44565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60048110610fc457610fc3610f15565b5b50565b610fd081610e4a565b8114610fdb57600080fd5b50565b60048110610feb57600080fd5b5056fea264697066735822122097ddffdb8ce1c7e61d5a45b5a6ce557da76ac238360e074b41465ab2bf5f2d9c64736f6c63430008000033";

type VehicleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VehicleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Vehicle__factory extends ContractFactory {
  constructor(...args: VehicleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Vehicle> {
    return super.deploy(overrides || {}) as Promise<Vehicle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Vehicle {
    return super.attach(address) as Vehicle;
  }
  connect(signer: Signer): Vehicle__factory {
    return super.connect(signer) as Vehicle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VehicleInterface {
    return new utils.Interface(_abi) as VehicleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Vehicle {
    return new Contract(address, _abi, signerOrProvider) as Vehicle;
  }
}
