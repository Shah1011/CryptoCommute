/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export declare namespace Vehicle {
  export type VEHICLE_INFOStruct = {
    vehicle_no: PromiseOrValue<string>;
    RC: PromiseOrValue<string>;
    vehicleImages: PromiseOrValue<string>;
    vehicleType: PromiseOrValue<BigNumberish>;
    driver: PromiseOrValue<string>;
  };

  export type VEHICLE_INFOStructOutput = [
    string,
    string,
    string,
    number,
    string,
  ] & {
    vehicle_no: string;
    RC: string;
    vehicleImages: string;
    vehicleType: number;
    driver: string;
  };
}

export declare namespace Ride {
  export type USERSStruct = {
    customer: PromiseOrValue<string>;
    driver: PromiseOrValue<string>;
  };

  export type USERSStructOutput = [string, string] & {
    customer: string;
    driver: string;
  };

  export type STATUSStruct = {
    isCancelled: PromiseOrValue<boolean>;
    isComplete: PromiseOrValue<boolean>;
    isConfirmed: PromiseOrValue<boolean>;
    wasCancelledBy: PromiseOrValue<BigNumberish>;
  };

  export type STATUSStructOutput = [boolean, boolean, boolean, number] & {
    isCancelled: boolean;
    isComplete: boolean;
    isConfirmed: boolean;
    wasCancelledBy: number;
  };

  export type RIDE_DETAILSStruct = {
    pickup: PromiseOrValue<string>;
    destination: PromiseOrValue<string>;
    distance: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
  };

  export type RIDE_DETAILSStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
  ] & {
    pickup: string;
    destination: string;
    distance: BigNumber;
    price: BigNumber;
  };

  export type RIDEStruct = {
    id: PromiseOrValue<BigNumberish>;
    users: Ride.USERSStruct;
    status: Ride.STATUSStruct;
    ride: Ride.RIDE_DETAILSStruct;
    vehicle: Vehicle.VEHICLE_INFOStruct;
    timestamp: PromiseOrValue<string>;
  };

  export type RIDEStructOutput = [
    BigNumber,
    Ride.USERSStructOutput,
    Ride.STATUSStructOutput,
    Ride.RIDE_DETAILSStructOutput,
    Vehicle.VEHICLE_INFOStructOutput,
    string,
  ] & {
    id: BigNumber;
    users: Ride.USERSStructOutput;
    status: Ride.STATUSStructOutput;
    ride: Ride.RIDE_DETAILSStructOutput;
    vehicle: Vehicle.VEHICLE_INFOStructOutput;
    timestamp: string;
  };
}

export interface RideInterface extends utils.Interface {
  functions: {
    'addVehicle(address,(string,string,string,uint8,address))': FunctionFragment;
    'cancelRide(uint256,uint8,string)': FunctionFragment;
    'completeRide(uint256,string)': FunctionFragment;
    'confirmRide((address,address),(bool,bool,bool,uint8),(string,string,uint256,uint256),string)': FunctionFragment;
    'getAllRides(uint256[])': FunctionFragment;
    'getRide(uint256)': FunctionFragment;
    'getRideCount()': FunctionFragment;
    'getVehicle(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateVehicle(address,(string,string,string,uint8,address))': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addVehicle'
      | 'cancelRide'
      | 'completeRide'
      | 'confirmRide'
      | 'getAllRides'
      | 'getRide'
      | 'getRideCount'
      | 'getVehicle'
      | 'owner'
      | 'renounceOwnership'
      | 'transferOwnership'
      | 'updateVehicle',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addVehicle',
    values: [PromiseOrValue<string>, Vehicle.VEHICLE_INFOStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'cancelRide',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'completeRide',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'confirmRide',
    values: [
      Ride.USERSStruct,
      Ride.STATUSStruct,
      Ride.RIDE_DETAILSStruct,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAllRides',
    values: [PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRide',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRideCount',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getVehicle',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateVehicle',
    values: [PromiseOrValue<string>, Vehicle.VEHICLE_INFOStruct],
  ): string;

  decodeFunctionResult(functionFragment: 'addVehicle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelRide', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'completeRide',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'confirmRide',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAllRides',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getRide', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getRideCount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getVehicle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateVehicle',
    data: BytesLike,
  ): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Ride extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RideInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addVehicle(
      driver: PromiseOrValue<string>,
      _vehicle: Vehicle.VEHICLE_INFOStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    cancelRide(
      _rideId: PromiseOrValue<BigNumberish>,
      _wasCancelledBy: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    completeRide(
      _rideId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    confirmRide(
      _user: Ride.USERSStruct,
      _status: Ride.STATUSStruct,
      _details: Ride.RIDE_DETAILSStruct,
      _timestamp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getAllRides(
      rideIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<[Ride.RIDEStructOutput[]]>;

    getRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[Ride.RIDEStructOutput]>;

    getRideCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVehicle(
      driver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[Vehicle.VEHICLE_INFOStructOutput]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateVehicle(
      driver: PromiseOrValue<string>,
      _vehicle: Vehicle.VEHICLE_INFOStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addVehicle(
    driver: PromiseOrValue<string>,
    _vehicle: Vehicle.VEHICLE_INFOStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  cancelRide(
    _rideId: PromiseOrValue<BigNumberish>,
    _wasCancelledBy: PromiseOrValue<BigNumberish>,
    _timestamp: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  completeRide(
    _rideId: PromiseOrValue<BigNumberish>,
    _timestamp: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  confirmRide(
    _user: string[],
    _status: (boolean | number)[],
    _details: (string | number)[],
    _timestamp: number,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getAllRides(
    rideIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides,
  ): Promise<Ride.RIDEStructOutput[]>;

  getRide(
    _rideId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<Ride.RIDEStructOutput>;

  getRideCount(overrides?: CallOverrides): Promise<BigNumber>;

  getVehicle(
    driver: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<Vehicle.VEHICLE_INFOStructOutput>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateVehicle(
    driver: PromiseOrValue<string>,
    _vehicle: Vehicle.VEHICLE_INFOStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addVehicle(
      driver: PromiseOrValue<string>,
      _vehicle: Vehicle.VEHICLE_INFOStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    cancelRide(
      _rideId: PromiseOrValue<BigNumberish>,
      _wasCancelledBy: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    completeRide(
      _rideId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    confirmRide(
      _user: Ride.USERSStruct,
      _status: Ride.STATUSStruct,
      _details: Ride.RIDE_DETAILSStruct,
      _timestamp: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAllRides(
      rideIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<Ride.RIDEStructOutput[]>;

    getRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<Ride.RIDEStructOutput>;

    getRideCount(overrides?: CallOverrides): Promise<BigNumber>;

    getVehicle(
      driver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<Vehicle.VEHICLE_INFOStructOutput>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateVehicle(
      driver: PromiseOrValue<string>,
      _vehicle: Vehicle.VEHICLE_INFOStruct,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addVehicle(
      driver: PromiseOrValue<string>,
      _vehicle: Vehicle.VEHICLE_INFOStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    cancelRide(
      _rideId: PromiseOrValue<BigNumberish>,
      _wasCancelledBy: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    completeRide(
      _rideId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    confirmRide(
      _user: string[],
      _status: (boolean | number)[],
      _details: (string | number)[],
      _timestamp: number,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getAllRides(
      rideIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRideCount(overrides?: CallOverrides): Promise<BigNumber>;

    getVehicle(
      driver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateVehicle(
      driver: PromiseOrValue<string>,
      _vehicle: Vehicle.VEHICLE_INFOStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addVehicle(
      driver: PromiseOrValue<string>,
      _vehicle: Vehicle.VEHICLE_INFOStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    cancelRide(
      _rideId: PromiseOrValue<BigNumberish>,
      _wasCancelledBy: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    completeRide(
      _rideId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    confirmRide(
      _user: Ride.USERSStruct,
      _status: Ride.STATUSStruct,
      _details: Ride.RIDE_DETAILSStruct,
      _timestamp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getAllRides(
      rideIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRideCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVehicle(
      driver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateVehicle(
      driver: PromiseOrValue<string>,
      _vehicle: Vehicle.VEHICLE_INFOStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
